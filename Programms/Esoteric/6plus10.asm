USE16
ORG 100H

	JMP AFTER_DATA
	
;CODE_ARRAY	DB	"&(10)__________[10]_$"
;	CODE_ARRAY db "_<*+_<@*-,*+*-?\^2>.$</b>$>+++++++++[1]*<*+++++++++*-->^0&(2)&(1)[2]*+.*+";
;DB ">++++++++++[3]*<*+++++++++++*-->^0&(4)&(3)[4]*++.*+"
;DB ">++++++++++[5]*<*+++++++++++*-->^0&(6)&(5)[6]*+++++++++..*+"
;DB ">+++++++++++[7]*<*+++++++++++*-->^0&(8)&(7)[8]*++.*+"
;DB ">++++[u]*<*+++++++++*-->^0&(i)&(u)[i]*+.*+"
;DB ">++++++++++[b]*<*+++++++++*-->^0&(a)&(b)[a]*++++++++.*+"
;DB ">+++++++++++[c]*<*+++++++++++*-->^0&(v)&(c)[v]*++.*+"
;DB ">+++++++++++[d]*<*+++++++++++*-->^0&(f)&(d)[f]*+++++.*+"
;DB ">++++++++++[ppp]*<*+++++++++++*-->^0&(zzzz)&(ppp)[zzzz]*+++++++++.*+"
;DB ">++++++++++[w]*<*+++++++++++*-->^0&(e)&(w)[e]*+.*+"
;DB ">+++[r]*<*+++++++++++*-->^0&(t)&(r)[t]*++++.*+"
;DB "_$"
CODE_ARRAY	DB	10000 DUP(0)
	;CODE_ARRAY	DB	"+++++++++[1]*+++++++++*-->^0j(2)j(1)[2]*+.$";"+++>*+>*----^3_$"
	;*+*+++*-*-@*+*+,*+*+*+?\<^1r$"
	VARIABLEN	DB	1000 DUP(0)
	STAPEL	DB	1000 DUP(0)
	CMD	DB	"+-*@?\,^<>[]()&/._"
	CMD_COUNT DB 18
	IS_POINTER	DB	0
	CMP1	DW	0
	CMP2	DW	0
	IS_VGL	DB	0
	iSTACK	DB 512 DUP(0)
	DATN	DB	129 DUP(0)
	FEHLER2 DB "Datei nicht gefunden.",13,10,"$"
	FEHLER3 DB "Fehler beim Oeffnen der Datei",13,10,"$"
	FEHLER4	DB "6+10 (C) 2006 by Josef Biehler",13,10
			DB "Kein Dateiname angegeben.",13,10,"$"
	FEHLER7 DB "6plus10.com v1.0",13,10
	FEHLER5	DB "Richtige Benutzung: 6plus10.com dateiname.xy",13,10,"$"
	PRESS_K DB "Bitte Taste druecken zum beenden.",13,10,"$"
AFTER_DATA:

	MOV AX,CS
	MOV DS,AX
	MOV ES,AX
	LEA AX,[iSTACK]
	MOV SS,AX
	MOV SP,512
	
	MOV BX,80H
	MOV CL,[DS:BX]
	XOR CH,CH
	CMP CX,0
	JNE COMMANDLINE_OK
	
	MOV AH,09H
	LEA DX,[FEHLER4]
	INT 21H
	LEA DX,[FEHLER5]
	INT 21H
	LEA DX,[PRESS_K]
	INT 21H
	MOV AH,01H
	INT 21H
	JMP END1
	
COMMANDLINE_OK:
	
	LEA SI,[DATN]
	MOV BX,82H
	XOR DX,DX
	DEC CX
	
COPY_DATN:
	MOV DL,[DS:BX]
	MOV [DS:SI],DL
	INC SI
	INC BX
	LOOP COPY_DATN
	
	MOV AX,CS
	MOV DS,AX
	
	MOV AH,03DH
	MOV AL,0
	LEA DX,[DATN]
	INT 21H
	
	JNC OPEN_DATA_OK
	
	LEA DX,[FEHLER2]
	MOV AH,09H
	INT 21H
	LEA DX,[PRESS_K]
	INT 21H
	MOV AH,01H
	INT 21H
	JMP END1
	
OPEN_DATA_OK:
	
	MOV BX,AX
	MOV AH,3FH
	MOV CX,10000
	LEA DX,[CODE_ARRAY]
	INT 21H
	
	JNC READ_DATA_OK
	
	LEA DX,[FEHLER3]
	MOV AH,09H
	INT 21H
	LEA DX,[PRESS_K]
	INT 21H
	MOV AH,01H
	INT 21H
	JMP END1
	
READ_DATA_OK:


	LEA SI,[CODE_ARRAY]
	LEA DI,[VARIABLEN]
	LEA BX,[STAPEL]
	ADD BX,1000
	
SCHLEIFE:
	LODSB
	CMP AL,"*"
	JE POINTER_COMMENT
	CMP AL,"+"
	JE PLUS
	CMP AL,"-"
	JE MINUS
	CMP AL,"."
	JE PRINT
	CMP AL,"_"
	JE READ
	CMP AL,"@"
	JE BEGIN_COND
	CMP AL,"\"
	JE END_COND
	CMP AL,","
	JE NEXT_VGL
	CMP AL,"?"
	JE QUEST
	CMP AL,"^"
	JE CHECK_NEXT_CMD
	CMP AL,">"
	JE PUSH_STACK
	CMP AL,"<"
	JE POP_STACK
	CMP AL,"["
	JE START_EK
	CMP AL,"("
	JE START_RK
	;CMP AL,"e"
	;JE JMP_EQUAL
	CMP AL,"&"
	JE JMP_JMP
	;CMP AL,"&"
	;JE DO_AND
	;CMP AL,"b"
	;JE JMP_BELOW
	;CMP AL,"a"
	;JE JMP_ABOVE
	
	CMP AL,"$"
	JE END1
	JMP SCHLEIFE
	
DO_AND:
	DEC BYTE [BX]
	PUSH SI
	CALL SEARCH_POS
	POP SI
	MOV SI,AX
	JMP SCHLEIFE
	

JMP_BELOW:
	CMP BYTE [BX],2
	JNE SCHLEIFE
	INC SI
	PUSH SI
	CALL SEARCH_POS
	POP SI
	MOV SI,AX
	JMP SCHLEIFE
	
JMP_ABOVE:
	CMP BYTE [BX],1
	JNE SCHLEIFE
	INC SI
	PUSH SI
	CALL SEARCH_POS
	POP SI
	MOV SI,AX
	JMP SCHLEIFE
	
JMP_JMP:
	INC SI
	PUSH SI
	CALL SEARCH_POS
	POP SI
	MOV SI,AX
	JMP SCHLEIFE
	
JMP_EQUAL:
	CMP BYTE [BX],0
	JNE SCHLEIFE
	INC SI
	PUSH SI
	CALL SEARCH_POS
	POP SI
	MOV SI,AX
	JMP SCHLEIFE
	
START_EK:
	LODSB
	CMP AL,"]"
	JE SCHLEIFE
	CMP AL,"$"
	JE END1
	
START_RK:
	LODSB
	CMP AL,")"
	JE SCHLEIFE
	CMP AL,"$"
	JE END1
	
PUSH_STACK:
	CMP BYTE [IS_POINTER],1
	JE GO_STACK_BACK
	DEC BX
	MOV AL,[DI]
	MOV [BX],AL
	JMP SCHLEIFE
GO_STACK_BACK:
	DEC BX
	MOV [IS_POINTER],0
	JMP SCHLEIFE
	
POP_STACK:
	CMP BYTE [IS_POINTER],1
	JE GO_STACK_FORWARD
	MOV AL,[BX]
	MOV [DI],AL
	INC BX
	JMP SCHLEIFE
GO_STACK_FORWARD:
	INC BX
	MOV [IS_POINTER],0
	JMP SCHLEIFE
CHECK_NEXT_CMD:
	MOV AL,[SI]
	SUB AL,48
	CMP [BX],AL
	JE CNC_OK
	INC SI
	MOV AL,[SI]
	CMP AL,"*"
	JE CNC_POINTER
	INC SI
	JMP SCHLEIFE
CNC_OK:
	JMP SCHLEIFE
CNC_POINTER:
	INC SI
	INC SI
	JMP SCHLEIFE
	
BEGIN_COND:
	MOV BYTE [IS_VGL],1
	MOV [CMP1],DI
	JMP SCHLEIFE
	
END_COND:
	MOV [CMP1],0
	MOV [CMP2],0
	MOV [IS_VGL],0
	JMP SCHLEIFE
	
NEXT_VGL:
	MOV AX,[CMP1]
	MOV [CMP2],AX
	MOV [CMP1],DI
	JMP SCHLEIFE
	
QUEST:
	PUSH BX
	PUSH SI
	PUSH DI
	MOV SI,[CMP2]
	MOV DI,[CMP1]
	MOV AL,[SI];[CMP2]
	MOV BL,[DI];[CMP1]
	CMP AL,BL
	POP DI
	POP SI
	POP BX
	JE QUEST_EQUAL
	JA QUEST_ABOVE
	JB QUEST_BELOW
	JMP SCHLEIFE
	
QUEST_EQUAL:
	;MOV BYTE [DI],0
	DEC BX
	MOV BYTE [BX],0
	;INC BX
	JMP SCHLEIFE
	
QUEST_ABOVE:
	;MOV BYTE [DI],1
	DEC BX
	MOV BYTE [BX],1
	;INC BX
	JMP SCHLEIFE
	
QUEST_BELOW:
	;MOV BYTE [DI],2
	DEC BX
	MOV BYTE [BX],2
	;INC BX
	JMP SCHLEIFE
	

POINTER_COMMENT:
	MOV AL,[SI]
	CALL IS_CMD
	CMP AX,1
	JE IS_COMMENT
	MOV [IS_POINTER],1
	;MOV AL,[SI]
	;INC SI
	;CMP [IS_VGL],1
	;JE VGL1
	;;CMP AL,"-"
	;JE IS_POINTER_MINUS
	;CMP AL,"+"
	;JNE SCHLEIFE
	;INC DI
	;JMP SCHLEIFE
;IS_POINTER_MINUS:
	;DEC DI
	JMP SCHLEIFE
	
VGL1:
	;mov dl,al
	;mov ah,02
	;int 21h
	CMP AL,"-"
	JE IS_VGL_MINUS
	CMP AL,"+"
	JNE SCHLEIFE
	INC BYTE [CMP1];DI
	MOV [IS_POINTER],0
	JMP SCHLEIFE
IS_VGL_MINUS:
	DEC BYTE [CMP1];DI
	MOV [IS_POINTER],0
	JMP SCHLEIFE
	
IS_COMMENT:
	LODSB
	CMP AL,"*"
	JE SCHLEIFE
	CMP AL,"$"
	JE END1
	JMP IS_COMMENT
	
IS_POINTER_1:
	;MOV [IS_POINTER],0
	CMP [IS_VGL],1
	JE VGL1
	CMP AL,"+"
	JE IS_POINTER_1_PLUS
	CMP AL,"-"
	JE IS_POINTER_1_MINUS
	JMP SCHLEIFE
	
IS_POINTER_1_PLUS:
	INC DI
	MOV [IS_POINTER],0
	JMP SCHLEIFE
	
IS_POINTER_1_MINUS:
	DEC DI
	MOV [IS_POINTER],0
	JMP SCHLEIFE
	
PLUS:
	CMP [IS_POINTER],1
	JE IS_POINTER_1
	INC BYTE [DI]
	JMP SCHLEIFE
	
MINUS:
	CMP [IS_POINTER],1
	JE IS_POINTER_1
	DEC BYTE [DI]
	JMP SCHLEIFE
	
PRINT:
	MOV AH,02H
	MOV DL,[BX]
	INC BX
	INT 21H
	JMP SCHLEIFE
	
READ:
	MOV AH,01H
	INT 21H
	DEC BX
	MOV BYTE [BX],AL
	JMP SCHLEIFE
	
	
END1:
	;MOV DL,[DI]
	;ADD DL,48
	;MOV AH,02
	;INT 21H
	MOV AH,4CH
	INT 21H
	
	
IS_CMD:
	PUSH SI
	PUSH CX
	MOV CL,[CMD_COUNT]
	XOR CH,CH
	LEA SI,[CMD]
	
IS_CMD_B:
	MOV AH,[SI]
	INC SI
	CMP AH,AL
	JE IS_CMD_OK
	LOOP IS_CMD_B
	JMP IS_CMD_NO
	
IS_CMD_OK:
	MOV AX,0
	JMP IS_CMD_END
	
IS_CMD_NO:
	MOV AX,1
	JMP IS_CMD_END
	
IS_CMD_END:
	POP CX
	POP SI
RET


SEARCH_POS:
	PUSH BP
	MOV BP,SP
	ADD BP,4
	PUSH DI
	PUSH SI
	PUSH BX
	
	MOV SI,[BP] ;adresse des stringes
	
	LEA DI,[CODE_ARRAY]
	
SP_START:
	MOV AL,[DI]
	INC DI
	CMP AL,"["
	JE SP_FIRST
	CMP AL,"$"
	JE END1
	JMP SP_START
	
SP_FIRST:
	MOV BX,DI
	DEC BX
	MOV SI,[BP]

SPF_1:
	MOV AH,[DI]
	INC DI
	LODSB
	CMP AH,"$"
	JE END1
	CMP AH,"]"
	JE SP_OK
	CMP AH,AL
	JNE SP_START
	JMP SPF_1
	
SP_OK:
	MOV AX,BX
	POP BX
	POP SI
	POP DI
	POP BP
RET
	
	
	
	
	

	