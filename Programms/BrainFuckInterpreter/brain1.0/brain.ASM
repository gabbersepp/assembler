;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   BRAIN.COM v1.0 A simple interpreter for the most usefull programming language: Brainfuck
;   Copyright (C) 2006 Josef Biehler
;	URL: biehler-josef.de
;	Mail: support@biehler-josef.de
;
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program; if not, write to the Free Software
;    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	ORG	100h			
	USE16				

	JMP AFTER_DATA
	
	BF_CODE	DB	10001 DUP("$")
	BF_LEN	DW	0
	BF_CODE_ARRAY DB 3000 DUP(0)
	iSTACK DB 512 DUP(0)
	BF_OPEN_ARRAY DW 1000 DUP(0)
	BF_CLOSE_ARRAY DW 1000 DUP(0)
	DATN	DB	128 DUP(0)
	UNIX	DB	0
	FEHLER1 DB "Der Interpreter fand eine ungleiche ANzahl von '[' und ']' Klammern vor.",13,10,"$"
	FEHLER2 DB "Datei nicht gefunden.",13,10,"$"
	FEHLER3 DB "Fehler beim Oeffnen der Datei",13,10,"$"
	FEHLER4 DB "Kein Dateiname angegeben.",13,10,"$"
	FEHLER5	DB "Richtige Benutzung: brain.com dateiname.xy"
	FEHLER6	DB "Zugriffsfehler der Variablen.",13,10,"$"
	PRESS_K DB "Bitte Taste druecken zum beenden.",13,10,"$"
AFTER_DATA:

	MOV AX,CS
	MOV DS,AX
	MOV ES,AX
	LEA AX,[iSTACK]
	MOV SS,AX
	MOV SP,512
	
	MOV BX,80H
	MOV CL,[DS:BX]
	XOR CH,CH
	CMP CX,0
	JNE COMMANDLINE_OK
	
	MOV AH,09H
	LEA DX,[FEHLER4]
	INT 21H
	LEA DX,[FEHLER5]
	INT 21H
	LEA DX,[PRESS_K]
	INT 21H
	MOV AH,01H
	INT 21H
	JMP BF_END
	
COMMANDLINE_OK:
	
	LEA SI,[DATN]
	MOV BX,82H
	XOR DX,DX
	DEC CX
	
COPY_DATN:
	MOV DL,[DS:BX]
	MOV [DS:SI],DL
	INC SI
	INC BX
	LOOP COPY_DATN
	
	MOV AX,CS
	MOV DS,AX
	
	MOV AH,03DH
	MOV AL,0
	LEA DX,[DATN]
	INT 21H
	
	JNC OPEN_DATA_OK
	
	LEA DX,[FEHLER2]
	MOV AH,09H
	INT 21H
	LEA DX,[PRESS_K]
	INT 21H
	MOV AH,01H
	INT 21H
	JMP BF_END
	
OPEN_DATA_OK:
	
	MOV BX,AX
	MOV AH,3FH
	MOV CX,10000
	LEA DX,[BF_CODE]
	INT 21H
	
	JNC READ_DATA_OK
	
	LEA DX,[FEHLER3]
	MOV AH,09H
	INT 21H
	LEA DX,[PRESS_K]
	INT 21H
	MOV AH,01H
	INT 21H
	JMP BF_END
	
READ_DATA_OK:

	MOV [BF_LEN],AX
	LEA SI,[BF_CODE]
	MOV CX,[BF_LEN]
	LEA DI,[BF_CODE_ARRAY]
	
	XOR BX,BX
	XOR DX,DX
	MOV CX,[BF_LEN]
COUNT_OPEN_CLOSE:
	LODSB
	CMP AL,"["
	JE COC_O
	CMP AL,"]"
	JE COC_C
	LOOP COUNT_OPEN_CLOSE
	
COC_E1:
	CMP DX,BX
	JE COC_E
	LEA DX,[FEHLER1]
	MOV AH,09H
	INT 21H
	LEA DX,[PRESS_K]
	INT 21H
	MOV AH,01H
	INT 21H
	JMP BF_END
	
COC_O:
	INC BX
	LOOP COUNT_OPEN_CLOSE
	JMP COC_E1
COC_C:
	INC DX
	LOOP COUNT_OPEN_CLOSE
	JMP COC_E1
	
COC_E:
	MOV CX,[BF_LEN]
	LEA SI,[BF_OPEN_ARRAY]
	LEA DI,[BF_CLOSE_ARRAY]
	LEA BX,[BF_CODE]
	
SEARCH:
	MOV AL,[BX]
	INC BX
	CMP AL,"["
	JE S_O
	LOOP SEARCH
	JMP SCHLEIFE1
	
S_O:
	MOV WORD [SI],BX
	DEC WORD [SI]
	INC SI
	INC SI
	CALL S_C
	MOV WORD [DI],AX
	INC DI
	INC DI
	LOOP SEARCH
	JMP SCHLEIFE1
	
S_C:
	PUSH BX
	PUSH SI
	PUSH DI
	PUSH CX
	PUSH DX
	
	XOR DX,DX
	MOV SI,BX
	
S_S_C:
	LODSB
	CMP AL,"["
	JE S_S_C_O
	CMP AL,"]"
	JE S_S_C_C
	LOOP S_S_C
	JMP S_C_END
	
S_S_C_O:
	INC DX
	LOOP S_S_C
	JMP S_C_END
	
S_S_C_C:
	CMP DX,0
	JE S_C_OK
	DEC DX
	LOOP S_S_C
	JMP S_C_END
	
S_C_OK:
	DEC SI
	MOV AX,SI
S_C_END:
	POP DX
	POP CX
	POP DI
	POP SI
	POP BX
RET
	
SCHLEIFE1:

	LEA SI,[BF_CODE]
	MOV CX,[BF_LEN]
	LEA DI,[BF_CODE_ARRAY]
	
	CMP WORD [SI],"/u"
	JNE SCHLEIFE
	
	MOV [UNIX],1
	
SCHLEIFE:
	INC CX
	LODSB
	CMP AL,"+"
	JE PLUS
	CMP AL,"-"
	JE MINUS
	CMP AL,">"
	JE FORWARD
	CMP AL,"<"
	JE BACK
	CMP AL,"."
	JE PRINT
	CMP AL,","
	JE READ
	CMP AL,"["
	JE OPEN
	CMP AL,"]"
	JE CLOSE
	CMP AL,"$"
	JE BF_END
	JMP SCHLEIFE
	JMP BF_END
	
MINUS:
	DEC BYTE [DI]
	JMP SCHLEIFE
	
PLUS:
	INC BYTE [DI]
	JMP SCHLEIFE
	
FORWARD:
	PUSH SI
	LEA SI,[BF_OPEN_ARRAY]
	ADD SI,1000
	CMP DI,SI
	JNE FORWARD_OK
	LEA DX,[FEHLER6]
	MOV AH,09H
	INT 21H
	LEA DX,[PRESS_K]
	INT 21H
	MOV AH,01H
	INT 21H
	POP SI
	JMP BF_END
FORWARD_OK:
	POP SI
	INC DI
	JMP SCHLEIFE
	
BACK:
	PUSH SI
	LEA SI,[BF_OPEN_ARRAY]
	CMP DI,SI
	JNE BACK_1_OK
	LEA DX,[FEHLER6]
	MOV AH,09H
	INT 21H
	LEA DX,[PRESS_K]
	INT 21H
	MOV AH,01H
	INT 21H
	POP SI
	JMP BF_END
BACK_1_OK:
	POP SI
	DEC DI
	JMP SCHLEIFE
	
PRINT:
	MOV AH,02H
	MOV DL,[DI]
	
	CMP Dl,10
	JNE PR_OK
	INT 21H
	MOV DL,13
;	CMP BYTE [UNIX],1
;	JNE PR_OK
;	CMP DL,10
;	JNE PR_OK
;	XOR DL,7
PR_OK:
	INT 21H
	JMP SCHLEIFE
	
READ:
	MOV AH,01
	INT 21H
	
	CMP AL,13
	JNE NO_ENTER
	PUSH AX
	PUSH DX
	MOV AH,02h
	MOV DL,10
	INT 21H
	POP DX
	POP AX
	
NO_ENTER:
	CMP BYTE [UNIX],1
	JNE RD_OK
	
	CMP AL,13
	JNE RD_OK
	XOR AL,7
RD_OK:
	MOV BYTE [DI],AL
	JMP SCHLEIFE
	
OPEN:
	CMP BYTE [DI],0
	JE OPEN_0
	JMP SCHLEIFE
	
OPEN_0:
	MOV BX,SI
	DEC BX
	CALL SEARCH_END
	LEA BX,[BF_CLOSE_ARRAY]
	ADD BX,AX
	ADD BX,AX
	MOV SI,[BX]
	INC SI
	JMP SCHLEIFE
	
CLOSE:
	CMP BYTE [DI],0
	JE SCHLEIFE
	PUSH DX
	XOR DX,DX
	LEA BX,[BF_CLOSE_ARRAY]
	DEC SI
S_CLOSE:
	MOV AX,[BX]
	INC BX
	INC BX
	CMP AX,SI
	JE CLOSE_OK
	INC DX
	JMP S_CLOSE
CLOSE_OK:
	LEA BX,[BF_OPEN_ARRAY]
	ADD BX,DX
	ADD BX,DX
	MOV SI,[BX]
	POP DX
	JMP SCHLEIFE

ENDE:
BF_END:
MOV AH,4ch
INT 21h
ret


SEARCH_END:
	PUSH SI
	PUSH DI
	PUSH CX
	PUSH BX
	PUSH DX
	
	XOR DX,DX
	LEA SI,[BF_OPEN_ARRAY]
	MOV CX,1000
	
S_E_START:
	LODSW
	CMP AX,BX
	JE S_E_START_OK
	INC DX
	LOOP S_E_START
	JMP BF_END
	
S_E_START_OK:
	MOV AX,DX
	POP DX
	POP BX
	POP CX
	POP DI
	POP SI
RET
	
	